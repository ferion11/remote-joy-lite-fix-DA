static const float2 INPUT_SIZE = float2(480.0f, 272.0f);
static const float2 HALF_PIXEL = float2(0.5f, 0.5f);

sampler2D textureSampler;
float2 outputSize;

float spline36_0_1(float x) {
	return ((13.0f / 11.0f * x - 453.0f / 209.0f) * x - 3.0f / 209.0f) * x + 1.0f;
}

float spline36_1_2(float x) {
	return ((-6.0f / 11.0f * x + 612.0f / 209.0f) * x - 1038.0f / 209.0f) * x + 540.0f / 209.0f;
}

float spline36_2_3(float x) {
	return ((1.0f / 11.0f * x - 159.0f / 209.0f) * x + 434.0f / 209.0f) * x - 384.0f / 209.0f;
}

float4 rgb(float inputX, float inputY) {
	return tex2D(textureSampler, (float2(inputX, inputY) + HALF_PIXEL) / INPUT_SIZE);
}

float4 interpolateHorizontally(float2 inputPos, int2 inputPosFloor, int dy) {
	float sumOfWeights = 0.0f;
	float4 sumOfWeightedPixel = 0.0f;

	float x;
	float weight;

	x = inputPos.x - (inputPosFloor.x - 2);
	weight = spline36_2_3(x);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * rgb(inputPosFloor.x - 2, inputPosFloor.y + dy);

	--x;
	weight = spline36_1_2(x);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * rgb(inputPosFloor.x - 1, inputPosFloor.y + dy);

	--x;
	weight = spline36_0_1(x);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * rgb(inputPosFloor.x + 0, inputPosFloor.y + dy);

	x = 1.0f - x;
	weight = spline36_0_1(x);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * rgb(inputPosFloor.x + 1, inputPosFloor.y + dy);

	++x;
	weight = spline36_1_2(x);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * rgb(inputPosFloor.x + 2, inputPosFloor.y + dy);

	++x;
	weight = spline36_2_3(x);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * rgb(inputPosFloor.x + 3, inputPosFloor.y + dy);

	return sumOfWeightedPixel / sumOfWeights;
}

float4 process(float2 outputPos : VPOS) : COLOR0 {
	float2 inputPos = outputPos / outputSize * INPUT_SIZE;
	int2 inputPosFloor = (int2)inputPos;

	// Vertical interporation
	float sumOfWeights = 0.0;
	float4 sumOfWeightedPixel = 0.0;

	float weight;
	float y;

	y = inputPos.y - (inputPosFloor.y - 2);
	weight = spline36_2_3(y);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * interpolateHorizontally(inputPos, inputPosFloor, -2);

	--y;
	weight = spline36_1_2(y);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * interpolateHorizontally(inputPos, inputPosFloor, -1);

	--y;
	weight = spline36_0_1(y);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * interpolateHorizontally(inputPos, inputPosFloor, +0);

	y = 1.0f - y;
	weight = spline36_0_1(y);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * interpolateHorizontally(inputPos, inputPosFloor, +1);

	++y;
	weight = spline36_1_2(y);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * interpolateHorizontally(inputPos, inputPosFloor, +2);

	++y;
	weight = spline36_2_3(y);
	sumOfWeights += weight;
	sumOfWeightedPixel += weight * interpolateHorizontally(inputPos, inputPosFloor, +3);

	return float4((sumOfWeightedPixel / sumOfWeights).xyz, 1.0f);
}
